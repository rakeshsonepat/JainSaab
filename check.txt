CALL FUNCTION 'ZGSEU003_FM_FILL_ZSMF_CONDTYPE'
  EXPORTING
    i_category  = c_a
    i_kalsm     = komk-kalsm
  IMPORTING
    e_condtypes = t_condtypes.
*&-- End of Changes on on 08/28/2009 by ASKB Trasnsport Req:DECK910661 - QTC 423

**if sy-subrc = 0.
IF t_condtypes[] IS NOT INITIAL.
*&-- End of changes on 10/18/2009 by GAC7 Trasnsport Req:DECK910661 - QTC 423

*&--- Condition value should be denominated to the currency of condition type for which ZSMF_CONDTYPES-ZMFCURR = 'Y'
*     convert the amount for all the condition type into currency of the cond for which ZSMF_CONDTYPES-ZMFCURR = 'Y'
*&-------------------------------------- Added By GND3 - Begin
  SORT t_condtypes BY zmfcurr.
  t_xkomv[] = xkomv[].
  SORT t_xkomv BY kschl.
*&-------------------------------------- Added By GND3 - End
*read table t_condtypes assigning <condtype> with key ZMFCURR = c_yes
*                                            binary search.
*if sy-subrc = 0.
** Condition type (currency)
** read table xkomv assigning <komv> with key kschl = <condtype>-kschl.
* read table t_xkomv assigning <komv> with key kschl = <condtype>-kschl
*                                     binary search.
* if sy-subrc = 0.
*   w_kschl_curr = <komv>-waers.
* endif.
* unassign: <condtype>,
*          <komv>.
*endif.

  LOOP AT t_condtypes ASSIGNING <condtype> WHERE zmfcurr = c_yes.
* Condition type (currency)
* read table xkomv assigning <komv> with key kschl = <condtype>-kschl.
    READ TABLE t_xkomv ASSIGNING <komv> WITH KEY kschl = <condtype>-kschl
                                        BINARY SEARCH.
    IF sy-subrc = 0.
      w_kschl_curr = <komv>-waers.
      EXIT.
    ENDIF.

  ENDLOOP.

  UNASSIGN: <condtype>,
            <komv>.

*&--- Start of changes by GND3 - 08/05/08 - QTC 423
* loop at t_condtypes assigning <condtype>.                              " Commented by GND3 - QTC 423
*  read table xkomv assigning <komv> with key kschl = <condtype>-kschl.  " Commented by GND3 - QTC 423

** Begin of Insert IAR3    "Commented by ISJ3
*  DATA : lt_t684g     TYPE TABLE OF t684g,
*         ls_t684g     LIKE LINE OF lt_t684g,
*         lv_ptd_price TYPE kwert,
*         lv_curr_pric TYPE kwert.
*
*  IF sy-uname = 'IAR3' OR sy-uname = 'YRS2' .
*
*    DATA: lv_vbak(20)          TYPE c VALUE '(SAPMV45A)VBAK'.
*
*    FIELD-SYMBOLS: <fs_vbak> TYPE vbak.
*
** Assign the header data
*    ASSIGN (lv_vbak) TO <fs_vbak>.
*
** Check for the return code
*    IF sy-subrc = 0.
*      DATA(lw_vbak) = <fs_vbak>.
*    ENDIF.
*
*  ENDIF.
*
** End of Insert IAR3

  SORT t_condtypes BY kschl.

*<<Start of Changes by Swati Jain (ISJ3) on 08.30.2021 for IN00996344- BECK931335  >>
  IF sy-uname = 'ISJ3'.

    TYPES : BEGIN OF lty_amount,
              kschl TYPE komv-kschl,
*              kinak TYPE komv-kinak,
*              stunr TYPE komv-stunr,
              kaugr TYPE kaugr,
              kbetr TYPE komv-kbetr,

            END OF lty_amount.

    DATA : lv_xkawrt       TYPE komv-kawrt,
           lv_kbetr        TYPE komv-kbetr,
           lv_arbfeld(15)  TYPE p,
           lv_active_kbetr TYPE komv-kbetr,
           lv_target_kbetr TYPE komv-kbetr,
           lt_amount       TYPE STANDARD TABLE OF lty_amount WITH NON-UNIQUE SORTED KEY by_kschl COMPONENTS kschl.



    CONSTANTS : lc_yes TYPE cfx_bi_api_t_bool VALUE 'yes'.
    IF komk-zzprinccap = 'Y' AND  w_kschl_curr NE komk-waerk AND kt684g[] IS NOT INITIAL AND kt684s[] IS NOT INITIAL.

      CLEAR lt_amount.
      LOOP AT  xkomv ASSIGNING FIELD-SYMBOL(<ls_xkomv>) WHERE kschl NE space .

        READ TABLE t_condtypes ASSIGNING FIELD-SYMBOL(<ls_condtype>) WITH KEY kschl = <ls_xkomv>-kschl BINARY SEARCH.
        IF sy-subrc = 0 AND ( <ls_condtype>-zmfcurr = lc_yes OR <ls_xkomv>-krech = 'A' ).
          CLEAR: lv_kbetr, lv_xkawrt, lv_arbfeld.
          CASE <ls_xkomv>-krech.
            WHEN 'A' .   "percentage
*              LOOP AT xkomv ASSIGNING FIELD-SYMBOL(<ls_stunr>) WHERE stunr = <ls_xkomv>-stunb.
*                ADD <ls_stunr>-kbetr TO lv_xkawrt .
*              ENDLOOP.
              lv_xkawrt = REDUCE kawrt( INIT lv_cbv TYPE kawrt
                                             FOR  <ls_stunr> IN xkomv WHERE ( stunr =  <ls_xkomv>-stunb )
                                             NEXT lv_cbv = lv_cbv + <ls_stunr>-kbetr ).

              lv_arbfeld = ( lv_xkawrt * <ls_xkomv>-kbetr ).
              lv_kbetr = lv_arbfeld / 100000.
            WHEN OTHERS .
              lv_kbetr = <ls_xkomv>-kbetr.
          ENDCASE.
          APPEND VALUE #( kschl = <ls_xkomv>-kschl
*                          stunr = <ls_xkomv>-stunr
                          kbetr = lv_kbetr ) TO lt_amount.
        ENDIF.
      ENDLOOP.

      TYPES : BEGIN OF ty_t684g ,
                kschl TYPE kschl,
                kaugr TYPE kaugr,
              END OF ty_t684g.
      TYPES  : ty_t_684g TYPE STANDARD TABLE OF ty_t684g WITH DEFAULT KEY
      WITH NON-UNIQUE SORTED KEY by_kschl COMPONENTS kschl.
*LOOP AT kt684s ASSIGNING FIELD-SYMBOL(<ls_t684s>) WHERE kauvf = 'C' .
*  lt_684g = value ty_t_684g( for <ls_684g> in kt684g where ( kaugr = <ls_t684s>-kaugr1
*                                                    and kaugr = <ls_t684s>-kaugr2 )
*                                                    ( CORRESPONDING #( <ls_684g> ) ) ).
*
*  ENDLOOP.

*            let base = VALUE ty_t684g( kschl = <ls_684g>-kschl

      DATA(lt_684g) = VALUE ty_t_684g( FOR <ls_t684s> IN kt684s WHERE ( kauvf = 'C' )
                                       FOR <ls_t684g> IN kt684g WHERE ( kaugr = <ls_t684s>-kaugr1
                                                                   and  kaugr = <ls_t684s>-kaugr2 )
                                        ( kschl = <ls_t684g>-kschl
                                          kaugr = <ls_t684g>-kaugr ) ).


*      LOOP AT kt684s ASSIGNING FIELD-SYMBOL(<ls_t684s>) WHERE kauvf = 'C' . "Best condition between the two exclusion groups
*        READ TABLE kt684g ASSIGNING FIELD-SYMBOL(<ls_t684g_active>) WITH KEY kaugr = <ls_t684s>-kaugr1.
*        IF sy-subrc = 0 AND <ls_t684s>-kaugr2 NE space.
*          READ TABLE kt684g ASSIGNING FIELD-SYMBOL(<ls_t684g_target>) WITH KEY kaugr = <ls_t684s>-kaugr2.
*          IF sy-subrc = 0.


*            CLEAR: lv_active_kbetr, lv_target_kbetr.
*            lv_active_kbetr = REDUCE kbetr( INIT lv_amt_active TYPE kbetr
*                                          FOR <ls_active> IN lt_amount WHERE ( kschl = <ls_t684g_active>-kschl )
*                                        NEXT lv_amt_active = lv_amt_active + <ls_active>-kbetr ).
*
*            lv_target_kbetr = REDUCE kbetr( INIT lv_target_kbetr TYPE kbetr
*                                          FOR <ls_target> IN lt_amount WHERE ( kschl = <ls_t684g_target>-kschl )
*                                        NEXT lv_target_kbetr = lv_target_kbetre + <ls_target>-kbetr ).
*
*            IF lv_active_kbetr < lv_target_kbetr.
*              xkwert = lv_active_kbetr.
*            ELSE.
*              xkwert = lv_target_kbetr.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDLOOP.
    ENDIF.
  ENDIF.

*<<End of Changes by Swati Jain (ISJ3) on 08.30.2021 for IN00996344- BECK931335  >>